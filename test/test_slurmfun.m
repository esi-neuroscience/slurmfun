addpath(fileparts(mfilename('fullpath')))

clc

dbstop if error
nJobs = 20;
inputArgs1 = num2cell(randi(20,nJobs,1)+60);
inputArgs2 = num2cell(randi(20,nJobs,1)+60);
inputArgs1{end+1} = 5000000000;
inputArgs2{end+1} = 1;

[out, jobs] = slurmfun(@myfunction, inputArgs1, inputArgs2, ...
    'partition', 'DEV', ...
    'stopOnError', false, ...
    'deleteFiles', true, ...
    'waitForToolboxes', {}, ...
    'mem', '8000M', ...
    'cpu', 1, ...
    'waitForReturn', true);

assert(numel(out) == nJobs + 1)
%% test varying partitions
partition = {'8GBS', '16GBS', '24GBL'};
mem = {'8000M', '16000M', '24000M'};
cpu = [1, 2, 4];

nJobs = 3;
inputArgs1 = num2cell(randi(20,nJobs,1)+60);
inputArgs2 = num2cell(randi(20,nJobs,1)+60);

[out, jobs] = slurmfun(@myfunction, inputArgs1, inputArgs2, ...
    'partition', partition, ...
    'stopOnError', false, ...
    'deleteFiles', true, ...
    'waitForToolboxes', {}, ...
    'mem', mem, ...
    'cpu', cpu, ...
    'waitForReturn', true);


%% no outputs

% no output
[out, jobs] = slurmfun(@function_without_output, {'in1'}, {'in2'}, ...
    'stopOnError', false, ...
    'deleteFiles', true, ...    
    'waitForReturn', true);

%% multiple outputs
[out, jobs] = slurmfun(@function_with_multiple_outputs, {'in1'}, {'in2'}, ...
    'stopOnError', false, ...
    'deleteFiles', true, ...    
    'waitForReturn', true);
assert(numel(out{1}) == 2);

%%
[out2, jobs2] = slurmfun(@myfunction_with_errors, inputArgs1(1), ...
    'partition', '8GBS', ...
    'stopOnError', true, ...
    'deleteFiles', false, ...
    'waitForToolboxes', {}, ...
    'waitForReturn', true);



% out = slurmfun(@pause, {4000}, ...
%     'partition', '8GBS', ...
%     'stopOnError', false, ...
%     'deleteFiles', false, ...
%     'waitForToolboxes', {});
